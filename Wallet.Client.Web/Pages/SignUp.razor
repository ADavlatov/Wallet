@page "/signup"
@using System.Net
@using Wallet.Client.Web.Entities
@using Wallet.Client.Web.Interfaces
@using Wallet.Client.Web.Models
@using Wallet.Client.Web.Models.Users
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService

<PageTitle>Регистрация</PageTitle>

<div class="container" style="margin-top: 100px;">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    Регистрация:
                </div>
                <div class="card-body">
                    <EditForm Model="@_requestModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator/>
                        <div class="mb-3">
                            <label class="form-label" style="width: 100%">
                                Имя пользователя:
                                <InputText @bind-Value="_requestModel.Username" class="form-control"/>
                                <ValidationMessage For="@(() => _requestModel.Username)"/>
                            </label>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" style="width: 100%">
                                Пароль
                                <InputText @bind-Value="_requestModel.Password" type="password" class="form-control"/>
                                <ValidationMessage For="@(() => _requestModel.Password)"/>
                            </label>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            @if (_loading)
                            {
                                <span class="spinner-border spinner-border-sm mr-1"></span>
                            }
                            Зарегестрироваться
                        </button>
                        @if (!string.IsNullOrEmpty(_error))
                        {
                            <div class="alert alert-danger mt-3 mb-0">@_error</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private readonly AuthRequest _requestModel = new();
    private bool _loading;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        if (user != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async Task HandleValidSubmit()
    {
        _loading = true;

        var response = await HttpClient.PostAsJsonAsync("/api/v1/users/SignUp", _requestModel);
        if (response.IsSuccessStatusCode)
        {
            await LocalStorageService.SetItem("user", await response.Content.ReadFromJsonAsync<User>());
            NavigationManager.NavigateTo("", true);
            StateHasChanged();
        }

        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<List<ValidationError>>();
            _error = string.Join(", ", errorResponse.Select(x => x.ErrorMessage));
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            _error = errorResponse.Message;
        }

        _loading = false;
        StateHasChanged();
    }

}