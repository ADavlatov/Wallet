@page "/Expenses"
@using System.Net.Http.Headers
@using Wallet.Client.Web.Entities
@using Wallet.Client.Web.Interfaces
@using Wallet.Client.Web.Models
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService

<PageTitle>Расходы</PageTitle>

<h3>Расходы</h3>

<div class="add-block card-body">
    <h2>Добавить новый элемент</h2>

    <div class="category-input mb-3">
        <label for="category" class="form-label">Категория:</label>
        <InputSelect id="category" @bind-Value="_transaction.CategoryId">
            <option value="">-- Выберите категорию --</option>
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="amount-input mb-3">
        <label for="amount" class="form-label">Сумма:</label>
        <InputNumber id="amount" @bind-Value="_transaction.Amount"/>
    </div>

    <div class="date-input mb-3">
        <label for="date" class="form-label">Дата:</label>
        <InputDate id="date" @bind-Value="_transaction.Date"/>
    </div>

    <div class="name-input mb-3">
        <label for="name" class="form-label">Имя (необязательно):</label>
        <InputText id="name" @bind-Value="_transaction.Name"/>
    </div>

    <button @onclick="AddTransaction" class="btn btn-primary">Добавить элемент</button>

    <div class="add-category-button">
        <button @onclick="OpenCategoryModal">Добавить категорию</button>
    </div>
</div>

<div class="items-list">
    <h2>Список элементов</h2>
    @if (_transactions.Any())
    {
        <table>
            <thead>
            <tr>
                <th>Категория</th>
                <th>Имя</th>
                <th>Сумма</th>
                <th>Дата</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var transaction in _transactions)
            {
                <tr>
                    <td>@GetCategoryName(transaction.CategoryId)</td>
                    <td>@transaction.Name</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Date.ToShortDateString()</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>Список элементов пуст.</p>
    }
</div>

@if (_showCategoryModal)
{
    <div class="category-modal">
        <div class="modal-content">
            <span class="close-button" @onclick="CloseCategoryModal">&times;</span>
            <h3>Добавить категорию</h3>
            <div class="category-name-input">
                <label for="categoryName">Имя категории:</label>
                <InputText id="categoryName" @bind-Value="_newCategoryName"/>
            </div>
            <button @onclick="AddCategory">Создать категорию</button>
        </div>
    </div>
}

@code {
    private const int Type = 1;
    private List<Category> _categories = new();
    private List<Transaction>? _transactions = new();
    private Transaction _transaction = new();
    private bool _showCategoryModal = false;
    private string _newCategoryName = "";

    protected override async void OnInitialized()
    {
        await GetCategories();
        await GetTransactions();
    }

    private void OpenCategoryModal()
    {
        _showCategoryModal = true;
    }
    
    private void CloseCategoryModal()
    {
        _showCategoryModal = false;
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrEmpty(_newCategoryName))
        {
            var user = await LocalStorageService.GetItem<User>("user");
            var addCategoryRequest = new AddCategoryRequest(user.UserId, _newCategoryName, Type);
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

            var response = await HttpClient.PostAsJsonAsync("api/v1/categories/AddCategory", addCategoryRequest);
            if (response.IsSuccessStatusCode)
            {
                _showCategoryModal = false;
                await GetCategories();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
    }

    private async Task GetCategories()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var getCategoriesRequest = new GetCategoriesRequest(user.UserId, Type);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/categories/GetCategoriesByType", getCategoriesRequest);
        if (response.IsSuccessStatusCode)
        {
            _categories = await response.Content.ReadFromJsonAsync<List<Category>>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task AddTransaction()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var addTransactionRequest = new AddTransactionRequest(user.UserId, _transaction.CategoryId, _transaction.Name, _transaction.Amount, _transaction.Date, Type);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/transactions/AddTransaction", addTransactionRequest);
        if (response.IsSuccessStatusCode)
        {
            _transaction = new Transaction();
            await GetTransactions();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task GetTransactions()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var getTransactionsRequest = new GetTransactionsByTypeRequest(user.UserId, Type);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/transactions/GetTransactionsByType", getTransactionsRequest);
        if (response.IsSuccessStatusCode)
        {
            _transactions = await response.Content.ReadFromJsonAsync<List<Transaction>>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }
    
    private string GetCategoryName(string categoryId)
    {
        var category = _categories.FirstOrDefault(c => c.Id == categoryId);
        return category?.Name ?? "Неизвестная категория";
    }
}