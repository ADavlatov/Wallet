@page "/Expenses"
@using System.Net
@using System.Net.Http.Headers
@using Wallet.Client.Web.Entities
@using Wallet.Client.Web.Interfaces
@using Wallet.Client.Web.Models
@using Wallet.Client.Web.Models.Catergories
@using Wallet.Client.Web.Models.Transactions
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService LocalStorageService

<PageTitle>Расходы</PageTitle>

<div class="custom-container">
    <h1 style="margin: 30px 0">Расходы</h1>
    <div class="card mb-3">
        <div class="add-block card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2>Добавить новый элемент</h2>
                <div>
                    <button @onclick="OpenManageCategoriesModal" class="btn btn-secondary me-2">Управление категориями</button>
                    <button @onclick="OpenCategoryModal" class="btn btn-secondary">Добавить категорию</button>
                </div>
            </div>

            <div class="category-input mb-3">
                <label for="category" class="form-label">Категория:</label>
                <InputSelect id="category" class="form-select" @bind-Value="_transaction.CategoryId">
                    <option value="">-- Выберите категорию --</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="amount-input mb-3">
                <label for="amount" class="form-label">Сумма:</label>
                <InputNumber id="amount" class="form-control" @bind-Value="_transaction.Amount"/>
            </div>

            <div class="date-input mb-3">
                <label for="date" class="form-label">Дата:</label>
                <InputDate id="date" class="form-control" @bind-Value="_transaction.Date"/>
            </div>

            <div class="name-input mb-3">
                <label for="name" class="form-label">Имя (необязательно):</label>
                <InputText id="name" class="form-control" @bind-Value="_transaction.Name"/>
            </div>

            <button @onclick="AddTransaction" class="btn btn-primary">Добавить элемент</button>
            @if (!string.IsNullOrEmpty(_addTransactionError))
            {
                <div class="mt-2 text-danger">@_addTransactionError</div>
            }
        </div>
    </div>

    <div class="items-list mt-3">
        <h2>Список элементов</h2>
        @if (_transactions.Any())
        {
            <table class="table table-dark">
                <thead>
                <tr>
                    <th>Категория</th>
                    <th>Имя</th>
                    <th>Сумма</th>
                    <th>Дата</th>
                    <th>Действия</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var transaction in _transactions)
                {
                    <tr>
                        <td>@GetCategoryName(transaction.CategoryId)</td>
                        <td>@transaction.Name</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.Date.ToShortDateString()</td>
                        <td>
                            <button @onclick="() => OpenEditTransactionModal(transaction)" class="btn btn-sm btn-primary">Изменить</button>
                            <button @onclick="() => DeleteTransaction(transaction.Id)" class="btn btn-sm btn-danger ms-2">Удалить</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <p>Список элементов пуст.</p>
        }
    </div>

</div>

@if (_showCategoryModal)
{
    <div class="modal fade show" id="categoryModal" tabindex="-1" role="dialog" aria-labelledby="categoryModalLabel" aria-modal="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="categoryModalLabel">Добавить категорию</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseCategoryModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Имя категории:</label>
                        <InputText id="categoryName" class="form-control" @bind-Value="_newCategoryName"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddCategory">Создать категорию</button>
                </div>
                @if (!string.IsNullOrEmpty(_addCategoryError))
                {
                    <div class="modal-body text-danger">@_addCategoryError</div>
                }
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (_showEditTransactionModal)
{
    <div class="modal fade show" id="editTransactionModal" tabindex="-1" role="dialog" aria-labelledby="editTransactionModalLabel" aria-modal="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editTransactionModalLabel">Изменить элемент</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseEditTransactionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="category-input mb-3">
                        <label for="editCategory" class="form-label">Категория:</label>
                        <InputSelect id="editCategory" class="form-select" @bind-Value="_editTransaction.CategoryId">
                            <option value="">-- Выберите категорию --</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="amount-input mb-3">
                        <label for="editAmount" class="form-label">Сумма:</label>
                        <InputNumber id="editAmount" class="form-control" @bind-Value="_editTransaction.Amount"/>
                    </div>

                    <div class="date-input mb-3">
                        <label for="editDate" class="form-label">Дата:</label>
                        <InputDate id="editDate" class="form-control" @bind-Value="_editTransaction.Date"/>
                    </div>

                    <div class="name-input mb-3">
                        <label for="editName" class="form-label">Имя (необязательно):</label>
                        <InputText id="editName" class="form-control" @bind-Value="_editTransaction.Name"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditTransactionModal">Отмена</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateTransaction">Сохранить изменения</button>
                    @if (!string.IsNullOrEmpty(_editTransactionError))
                    {
                        <div class="mt-2 text-danger">@_editTransactionError</div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (_showManageCategoriesModal)
{
    <div class="modal fade show" id="manageCategoriesModal" tabindex="-1" role="dialog" aria-labelledby="manageCategoriesModalLabel" aria-modal="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="manageCategoriesModalLabel">Управление категориями</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseManageCategoriesModal"></button>
                </div>
                <div class="modal-body">
                    @if (_categories.Any())
                    {
                        <table class="table table-dark">
                            <thead>
                            <tr>
                                <th>Имя категории</th>
                                <th>Действия</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var category in _categories)
                            {
                                <tr>
                                    <td>@category.Name</td>
                                    <td>
                                        <button @onclick="() => OpenEditCategoryModal(category)" class="btn btn-sm btn-primary">Изменить</button>
                                        <button @onclick="() => DeleteCategory(category.Id)" class="btn btn-sm btn-danger ms-2">Удалить</button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>Список категорий пуст.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseManageCategoriesModal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (_showEditCategoryModal)
{
    <div class="modal fade show" id="editCategoryModal" tabindex="-1" role="dialog" aria-labelledby="editCategoryModalLabel" aria-modal="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCategoryModalLabel">Изменить категорию</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseEditCategoryModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editCategoryName" class="form-label">Имя категории:</label>
                        <InputText id="editCategoryName" class="form-control" @bind-Value="_editingCategory.Name"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditCategoryModal">Отмена</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateCategory">Сохранить изменения</button>
                    @if (!string.IsNullOrEmpty(_editCategoryError))
                    {
                        <div class="mt-2 text-danger">@_editCategoryError</div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private const int Type = 1;
    private List<Category> _categories = new();
    private List<Transaction>? _transactions = new();
    private Transaction _transaction = new();
    private Transaction _editTransaction = new();
    private Category _editingCategory = new();
    private bool _showCategoryModal;
    private bool _showEditTransactionModal;
    private bool _showManageCategoriesModal;
    private bool _showEditCategoryModal;
    private string _newCategoryName = "";
    private string _addTransactionError;
    private string _addCategoryError;
    private string _editTransactionError;
    private string _editCategoryError;

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
        await GetTransactions();
    }

    private void OpenCategoryModal()
    {
        _showCategoryModal = true;
        _addCategoryError = string.Empty;
    }

    private void CloseCategoryModal()
    {
        _showCategoryModal = false;
    }

    private void OpenManageCategoriesModal()
    {
        _showManageCategoriesModal = true;
    }

    private void CloseManageCategoriesModal()
    {
        _showManageCategoriesModal = false;
    }

    private void OpenEditTransactionModal(Transaction transaction)
    {
        _editTransaction = new Transaction
        {
            Id = transaction.Id,
            CategoryId = transaction.CategoryId,
            Name = transaction.Name,
            Amount = transaction.Amount,
            Date = transaction.Date
        };
        _showEditTransactionModal = true;
        _editTransactionError = string.Empty;
    }

    private void CloseEditTransactionModal()
    {
        _showEditTransactionModal = false;
    }

    private void OpenEditCategoryModal(Category category)
    {
        _editingCategory = new Category { Id = category.Id, Name = category.Name };
        _showEditCategoryModal = true;
        _editCategoryError = string.Empty;
    }

    private void CloseEditCategoryModal()
    {
        _showEditCategoryModal = false;
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrEmpty(_newCategoryName))
        {
            var httpClient = HttpClientFactory.CreateClient("MainClient");
            var user = await LocalStorageService.GetItem<User>("user");
            var addCategoryRequest = new AddCategoryRequest(user.UserId, _newCategoryName, Type);
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

            var response = await httpClient.PostAsJsonAsync("api/v1/categories/AddCategory", addCategoryRequest);
            if (response.IsSuccessStatusCode)
            {
                _showCategoryModal = false;
                _newCategoryName = "";
                await GetCategories();
                StateHasChanged();
            }
            else
            {
                await HandleErrorResponse(response, "addCategory");
            }
        }
        else
        {
            _addCategoryError = "Имя категории не может быть пустым.";
        }
    }

    private async Task GetCategories()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var getCategoriesRequest = new GetCategoriesRequest(user.UserId, Type);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PostAsJsonAsync("api/v1/categories/GetCategoriesByType", getCategoriesRequest);
        if (response.IsSuccessStatusCode)
        {
            _categories = await response.Content.ReadFromJsonAsync<List<Category>>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task AddTransaction()
    {
        _addTransactionError = string.Empty;
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var addTransactionRequest = new AddTransactionRequest(user.UserId, _transaction.CategoryId, _transaction.Name, _transaction.Amount, _transaction.Date, Type);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PostAsJsonAsync("api/v1/transactions/AddTransaction", addTransactionRequest);
        if (response.IsSuccessStatusCode)
        {
            _transaction = new Transaction();
            await GetTransactions();
            StateHasChanged();
        }
        else
        {
            await HandleErrorResponse(response, "addTransaction");
        }
    }

    private async Task UpdateTransaction()
    {
        _editTransactionError = string.Empty;
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var updateTransactionRequest = new UpdateTransactionRequest(_editTransaction.Id, _editTransaction.CategoryId, _editTransaction.Name, _editTransaction.Amount, _editTransaction.Date);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PutAsJsonAsync("api/v1/transactions", updateTransactionRequest);
        if (response.IsSuccessStatusCode)
        {
            _showEditTransactionModal = false;
            await GetTransactions();
            StateHasChanged();
        }
        else
        {
            await HandleErrorResponse(response, "updateTransaction");
        }
    }

    private async Task DeleteTransaction(string transactionId)
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.DeleteAsync($"api/v1/transactions/{transactionId}");
        if (response.IsSuccessStatusCode)
        {
            await GetTransactions();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task UpdateCategory()
    {
        _editCategoryError = string.Empty;
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var updateCategoryRequest = new UpdateCategoryRequest(_editingCategory.Id, _editingCategory.Name);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PutAsJsonAsync("api/v1/categories", updateCategoryRequest);
        if (response.IsSuccessStatusCode)
        {
            _showEditCategoryModal = false;
            await GetCategories();
            await GetTransactions();
            StateHasChanged();
        }
        else
        {
            await HandleErrorResponse(response, "updateCategory");
        }
    }

    private async Task DeleteCategory(string categoryId)
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.DeleteAsync($"api/v1/categories/{categoryId}");
        if (response.IsSuccessStatusCode)
        {
            await GetCategories();
            await GetTransactions();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task GetTransactions()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var getTransactionsRequest = new GetTransactionsByTypeRequest(user.UserId, Type);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PostAsJsonAsync("api/v1/transactions/GetTransactionsByType", getTransactionsRequest);
        if (response.IsSuccessStatusCode)
        {
            _transactions = await response.Content.ReadFromJsonAsync<List<Transaction>>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private string GetCategoryName(string categoryId)
    {
        var category = _categories.FirstOrDefault(c => c.Id == categoryId);
        return category?.Name ?? "Неизвестная категория";
    }

    private async Task HandleErrorResponse(HttpResponseMessage response, string context)
    {
        var errorMessage = "";
        if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<List<ValidationError>>();
            errorMessage = string.Join(", ", errorResponse.Select(x => x.ErrorMessage));
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            errorMessage = errorResponse.Message;
        }

        switch (context)
        {
            case "addTransaction":
                _addTransactionError = errorMessage;
                break;
            case "addCategory":
                _addCategoryError = errorMessage;
                break;
            case "updateTransaction":
                _editTransactionError = errorMessage;
                break;
            case "updateCategory":
                _editCategoryError = errorMessage;
                break;
        }

        StateHasChanged();
    }

}