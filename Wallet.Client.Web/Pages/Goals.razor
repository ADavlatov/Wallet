@page "/Goals"
@using System.Net.Http.Headers
@using Wallet.Client.Web.Entities
@using Wallet.Client.Web.Interfaces
@using Wallet.Client.Web.Models.Goals
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService LocalStorageService

<PageTitle>Цели</PageTitle>

<div class="custom-container">
    <h1 style="margin: 30px 0">Цели накопления</h1>
    <div class="card mb-3">
        <div class="card-body">
            <h2>Добавить новую цель</h2>

            <div class="mb-3">
                <label for="goalName" class="form-label">Название цели:</label>
                <InputText id="goalName" class="form-control" @bind-Value="_newGoal.Name"/>
            </div>

            <div class="mb-3">
                <label for="goalSum" class="form-label">Сумма цели:</label>
                <InputNumber id="goalSum" class="form-control" @bind-Value="_newGoal.TargetSum"/>
            </div>

            <div class="mb-3">
                <label for="goalDate" class="form-label">Дата цели:</label>
                <InputDate id="goalDate" class="form-control" @bind-Value="_newGoal.Deadline"/>
            </div>

            <button @onclick="AddGoal" class="btn btn-primary">Добавить цель</button>
            @if (!string.IsNullOrEmpty(_addGoalError))
            {
                <div class="mt-2 text-danger">@_addGoalError</div>
            }
        </div>
    </div>

    <div class="mt-3">
        <h2>Список целей</h2>
        @if (_goals.Any())
        {
            <div class="list-group">
                @foreach (var goal in _goals)
                {
                    <div class="list-group-item">
                        <h3>@goal.Name</h3>
                        <div class="d-flex align-items-center mb-2">
                            <label class="me-2">Прогресс:</label>
                            <div class="progress flex-grow-1" style="height: 20px;">
                                <div class="progress-bar bg-success" role="progressbar" style="width: @goal.GetPercentage%;" aria-valuenow="@goal.GetPercentage" aria-valuemin="0" aria-valuemax="100">
                                    @goal.GetPercentage%
                                </div>
                            </div>
                            <span class="ms-2">@goal.GetPercentage%</span>
                        </div>
                        <p>Цель: @goal.TargetSum.ToString("C")</p>
                        <p>Накоплено: @goal.CurrentSum.ToString("C")</p>
                        <p>Дата цели: @goal.Deadline.ToString()</p>

                        <div class="mt-3 border-top pt-3 d-flex align-items-center">
                            <div>
                                <h4>Добавить средства</h4>
                                <div class="mb-3">
                                    <label for="@goal.Id" class="form-label">Сумма:</label>
                                    <InputNumber id="@goal.Id" class="form-control" @bind-Value="goal.AmountToAdd"/>
                                </div>
                                <button @onclick="@(() => AddSumToGoal(goal))" class="btn btn-success me-2">Добавить</button>
                                <button @onclick="() => OpenEditGoalModal(goal)" class="btn btn-primary me-2">Изменить</button>
                                <button @onclick="() => DeleteGoal(goal.Id)" class="btn btn-danger">Удалить</button>
                                @if (!string.IsNullOrEmpty(goal.AddSumError))
                                {
                                    <div class="text-danger mt-2">@goal.AddSumError</div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Список целей пуст.</p>
        }
    </div>
</div>
@if (_showEditGoalModal)
{
    <div class="modal fade show" id="editGoalModal" tabindex="-1" role="dialog" aria-labelledby="editGoalModalLabel" aria-modal="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editGoalModalLabel">Изменить цель</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseEditGoalModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editGoalName" class="form-label">Название цели:</label>
                        <InputText id="editGoalName" class="form-control" @bind-Value="_editingGoal.Name"/>
                    </div>

                    <div class="mb-3">
                        <label for="editGoalSum" class="form-label">Сумма цели:</label>
                        <InputNumber id="editGoalSum" class="form-control" @bind-Value="_editingGoal.TargetSum"/>
                    </div>

                    <div class="mb-3">
                        <label for="editGoalDate" class="form-label">Дата цели:</label>
                        <InputDate id="editGoalDate" class="form-control" @bind-Value="_editingGoal.Deadline"/>
                    </div>
                    @if (!string.IsNullOrEmpty(_editGoalError))
                    {
                        <div class="text-danger mt-2">@_editGoalError</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditGoalModal">Отмена</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateGoal">Сохранить изменения</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {

    private List<Goal> _goals = new();
    private NewGoal _newGoal = new();
    private Goal _editingGoal = new();
    private bool _showEditGoalModal = false;
    private string _addGoalError;
    private string _editGoalError;

    protected async override Task OnInitializedAsync()
    {
        await GetGoals();
    }

    private async Task AddGoal()
    {
        _addGoalError = string.Empty;
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var addGoalRequest = new AddGoalRequest(user.UserId, _newGoal.Name, _newGoal.TargetSum, _newGoal.Deadline);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PostAsJsonAsync("api/v1/goals/AddGoal", addGoalRequest);
        if (response.IsSuccessStatusCode)
        {
            _newGoal = new NewGoal();
            await GetGoals();
            StateHasChanged();
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            _addGoalError = errorResponse?.Message ?? "Произошла ошибка при добавлении цели.";
        }
    }

    private async Task GetGoals()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var getGoalsRequest = new GetGoalsRequest(user.UserId);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PostAsJsonAsync("api/v1/goals/GetGoals", getGoalsRequest);
        if (response.IsSuccessStatusCode)
        {
            _goals = await response.Content.ReadFromJsonAsync<List<Goal>>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task AddSumToGoal(Goal goal)
    {
        goal.AddSumError = string.Empty;
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var addSumToGoalRequest = new AddSumToGoalRequest(goal.Id, goal.AmountToAdd);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PostAsJsonAsync("api/v1/goals/AddSumToGoal", addSumToGoalRequest);
        if (response.IsSuccessStatusCode)
        {
            goal.AmountToAdd = 0;
            await GetGoals();
            StateHasChanged();
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            goal.AddSumError = errorResponse?.Message ?? "Произошла ошибка при добавлении средств.";
        }
    }

    private void OpenEditGoalModal(Goal goal)
    {
        _editingGoal = new Goal
        {
            Id = goal.Id,
            Name = goal.Name,
            TargetSum = goal.TargetSum,
            Deadline = goal.Deadline
        };
        _showEditGoalModal = true;
        _editGoalError = string.Empty;
    }

    private void CloseEditGoalModal()
    {
        _showEditGoalModal = false;
    }

    private async Task UpdateGoal()
    {
        _editGoalError = string.Empty;
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        var updateGoalRequest = new UpdateGoalRequest(_editingGoal.Id, _editingGoal.Name, _editingGoal.TargetSum, _editingGoal.Deadline);
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.PutAsJsonAsync("api/v1/goals/", updateGoalRequest);
        if (response.IsSuccessStatusCode)
        {
            _showEditGoalModal = false;
            await GetGoals();
            StateHasChanged();
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            _editGoalError = errorResponse?.Message ?? "Произошла ошибка при обновлении цели.";
        }
    }

    private async Task DeleteGoal(string goalId)
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var httpClient = HttpClientFactory.CreateClient("MainClient");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await httpClient.DeleteAsync($"api/v1/goals/{goalId}");
        if (response.IsSuccessStatusCode)
        {
            await GetGoals();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    public class ErrorResponse
    {
        public string Message { get; set; }
        public Dictionary<string, List<string>> Errors { get; set; }
    }

}