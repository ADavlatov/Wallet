@page "/Goals"
@using System.Net.Http.Headers
@using Wallet.Client.Web.Entities
@using Wallet.Client.Web.Interfaces
@using Wallet.Client.Web.Models
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService

<PageTitle>Цели</PageTitle>

<h1 style="margin-bottom: 30px">Цели накопления</h1>

<div class="card mb-3">
    <div class="card-body">
        <h2>Добавить новую цель</h2>

        <div class="mb-3">
            <label for="goalName" class="form-label">Название цели:</label>
            <InputText id="goalName" class="form-control" @bind-Value="_newGoal.Name"/>
        </div>

        <div class="mb-3">
            <label for="goalSum" class="form-label">Сумма цели:</label>
            <InputNumber id="goalSum" class="form-control" @bind-Value="_newGoal.TargetSum"/>
        </div>

        <div class="mb-3">
            <label for="goalDate" class="form-label">Дата цели:</label>
            <InputDate id="goalDate" class="form-control" @bind-Value="_newGoal.Deadline"/>
        </div>

        <button @onclick="AddGoal" class="btn btn-primary">Добавить цель</button>
    </div>
</div>

<div class="mt-3">
    <h2>Список целей</h2>
    @if (_goals.Any())
    {
    <div class="list-group">
        @foreach (var goal in _goals)
        {
        <div class="list-group-item">
            <h3>@goal.Name</h3>
            <div class="d-flex align-items-center mb-2">
                <label class="me-2">Прогресс:</label>
                <div class="progress flex-grow-1" style="height: 20px;">
                    <div class="progress-bar bg-success" role="progressbar" style="width: @goal.GetPercentage%;" aria-valuenow="@goal.GetPercentage" aria-valuemin="0" aria-valuemax="100">
                        @goal.GetPercentage%
                    </div>
                </div>
                <span class="ms-2">@goal.GetPercentage%</span>
            </div>
            <p>Цель: @goal.TargetSum.ToString("C")</p>
            <p>Накоплено: @goal.CurrentSum.ToString("C")</p>
            <p>Дата цели: @goal.Deadline</p>

            <div class="mt-3 border-top pt-3">
                <h4>Добавить средства</h4>
                <div class="mb-3">
                    <label for="@goal.Id" class="form-label">Сумма:</label>
                    <InputNumber id="@goal.Id" class="form-control" @bind-Value="goal.AmountToAdd"/>
                </div>
                <button @onclick="@(() => AddSumToGoal(goal))" class="btn btn-success">Добавить</button>
            </div>
        </div>
        }
    </div>
    }
    else
    {
    <p>Список целей пуст.</p>
    }
</div>

@code {

    private List<Goal> _goals = new();
    private NewGoal _newGoal = new();

    protected async override Task OnInitializedAsync()
    {
        await GetGoals();
    }

    private async Task AddGoal()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var addGoalRequest = new AddGoalRequest(user.UserId, _newGoal.Name, _newGoal.TargetSum, _newGoal.Deadline);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/goals/AddGoal", addGoalRequest);
        if (response.IsSuccessStatusCode)
        {
            _newGoal = new NewGoal();
            await GetGoals();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task GetGoals()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var getGoalsRequest = new GetGoalsRequest(user.UserId);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/goals/GetGoals", getGoalsRequest);
        if (response.IsSuccessStatusCode)
        {
            _goals = await response.Content.ReadFromJsonAsync<List<Goal>>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task AddSumToGoal(Goal goal)
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var addSumToGoalRequest = new AddSumToGoalRequest(goal.Id, goal.AmountToAdd);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/goals/AddSumToGoal", addSumToGoalRequest);
        if (response.IsSuccessStatusCode)
        {
            
            await GetGoals();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    // private List<Goal> goals = new List<Goal>()
    // {
    //     new Goal { Id = 1, Name = "Новый ноутбук", TargetSum = 1500, CurrentSum = 500, TargetDate = DateTime.Now.AddMonths(3) },
    //     new Goal { Id = 2, Name = "Отпуск", TargetSum = 3000, CurrentSum = 100, TargetDate = DateTime.Now.AddYears(1) }
    // };
    //
    // private NewGoal newGoal = new NewGoal();
    //
    // public class Goal
    // {
    //     public int Id { get; set; }
    //     public string Name { get; set; }
    //     public decimal TargetSum { get; set; }
    //     public decimal CurrentSum { get; set; } = 0;
    //     public DateTime TargetDate { get; set; }
    //     public decimal AmountToAdd { get; set; } = 0; // Для формы добавления средств
    //
    //     public int FillPercentage
    //     {
    //         get
    //         {
    //             if (TargetSum == 0) return 0; // Чтобы избежать деления на ноль
    //             return (int)((CurrentSum / TargetSum) * 100);
    //         }
    //     }
    // }
    //
    // public class NewGoal
    // {
    //     public string Name { get; set; } = "";
    //     public decimal TargetSum { get; set; }
    //     public DateTime TargetDate { get; set; } = DateTime.Now.AddMonths(6); // Пример даты по умолчанию
    // }
    //
    //
    // private void AddGoal()
    // {
    //     goals.Add(new Goal()
    //     {
    //         Id = goals.Any() ? goals.Max(g => g.Id) + 1 : 1,
    //         Name = newGoal.Name,
    //         TargetSum = newGoal.TargetSum,
    //         TargetDate = newGoal.TargetDate
    //     });
    //     newGoal = new NewGoal(); // Очистка формы
    // }
    //
    // private void AddFundsToGoal(Goal goal)
    // {
    //     if (goal.AmountToAdd > 0)
    //     {
    //         goal.CurrentSum += goal.AmountToAdd;
    //         if (goal.CurrentSum > goal.TargetSum)
    //         {
    //             goal.CurrentSum = goal.TargetSum; // Нельзя накопить больше цели
    //         }
    //
    //         goal.AmountToAdd = 0; // Очистка поля ввода суммы для добавления
    //     }
    // }

}