@page "/Incomes"
@using System.Net.Http.Headers
@using Wallet.Client.Web.Entities
@using Wallet.Client.Web.Interfaces
@using Wallet.Client.Web.Models
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService

<PageTitle>Доходы</PageTitle>

<h1 style="margin-bottom: 30px">Доходы</h1>

<div class="card mb-3">
    <div class="add-block card-body">
        <h2>Добавить новый элемент</h2>

        <div class="category-input mb-3">
            <label for="category" class="form-label">Категория:</label>
            <InputSelect id="category" class="form-select" @bind-Value="_transaction.CategoryId">
                <option value="">-- Выберите категорию --</option>
                @foreach (var category in _categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>

        <div class="amount-input mb-3">
            <label for="amount" class="form-label">Сумма:</label>
            <InputNumber id="amount" class="form-control" @bind-Value="_transaction.Amount"/>
        </div>

        <div class="date-input mb-3">
            <label for="date" class="form-label">Дата:</label>
            <InputDate id="date" class="form-control" @bind-Value="_transaction.Date"/>
        </div>

        <div class="name-input mb-3">
            <label for="name" class="form-label">Имя (необязательно):</label>
            <InputText id="name" class="form-control" @bind-Value="_transaction.Name"/>
        </div>

        <button @onclick="AddTransaction" class="btn btn-primary">Добавить элемент</button>

        <div class="add-category-button mt-3">
            <button @onclick="OpenCategoryModal" class="btn btn-secondary">Добавить категорию</button>
        </div>
    </div>
</div>

<div class="items-list mt-3">
    <h2>Список элементов</h2>
    @if (_transactions.Any())
    {
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Категория</th>
                <th>Имя</th>
                <th>Сумма</th>
                <th>Дата</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var transaction in _transactions)
            {
                <tr>
                    <td>@GetCategoryName(transaction.CategoryId)</td>
                    <td>@transaction.Name</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Date.ToShortDateString()</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>Список элементов пуст.</p>
    }
</div>

@if (_showCategoryModal)
{
    <div class="modal fade show" id="categoryModal" tabindex="-1" role="dialog" aria-labelledby="categoryModalLabel" aria-modal="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="categoryModalLabel">Добавить категорию</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseCategoryModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Имя категории:</label>
                        <InputText id="categoryName" class="form-control" @bind-Value="_newCategoryName"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddCategory">Создать категорию</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private const int Type = 0;
    private List<Category> _categories = new();
    private List<Transaction>? _transactions = new();
    private Transaction _transaction = new();
    private bool _showCategoryModal = false;
    private string _newCategoryName = "";

    protected override async void OnInitialized()
    {
        await GetCategories();
        await GetTransactions();
    }

    private void OpenCategoryModal()
    {
        _showCategoryModal = true;
    }

    private void CloseCategoryModal()
    {
        _showCategoryModal = false;
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrEmpty(_newCategoryName))
        {
            var user = await LocalStorageService.GetItem<User>("user");
            var addCategoryRequest = new AddCategoryRequest(user.UserId, _newCategoryName, Type);
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

            var response = await HttpClient.PostAsJsonAsync("api/v1/categories/AddCategory", addCategoryRequest);
            if (response.IsSuccessStatusCode)
            {
                _showCategoryModal = false;
                await GetCategories();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
        }
    }

    private async Task GetCategories()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var getCategoriesRequest = new GetCategoriesRequest(user.UserId, Type);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/categories/GetCategoriesByType", getCategoriesRequest);
        if (response.IsSuccessStatusCode)
        {
            _categories = await response.Content.ReadFromJsonAsync<List<Category>>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task AddTransaction()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var addTransactionRequest = new AddTransactionRequest(user.UserId, _transaction.CategoryId, _transaction.Name, _transaction.Amount, _transaction.Date, Type);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/transactions/AddTransaction", addTransactionRequest);
        if (response.IsSuccessStatusCode)
        {
            _transaction = new Transaction();
            await GetTransactions();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task GetTransactions()
    {
        var user = await LocalStorageService.GetItem<User>("user");
        var getTransactionsRequest = new GetTransactionsByTypeRequest(user.UserId, Type);
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.AccessToken);

        var response = await HttpClient.PostAsJsonAsync("api/v1/transactions/GetTransactionsByType", getTransactionsRequest);
        if (response.IsSuccessStatusCode)
        {
            _transactions = await response.Content.ReadFromJsonAsync<List<Transaction>>();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

    private string GetCategoryName(string categoryId)
    {
        var category = _categories.FirstOrDefault(c => c.Id == categoryId);
        return category?.Name ?? "Неизвестная категория";
    }

}